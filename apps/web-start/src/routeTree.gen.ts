/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as CourseIndexRouteImport } from './routes/course/index'
import { Route as CalendarIndexRouteImport } from './routes/calendar/index'
import { Route as CourseGradesIndexRouteImport } from './routes/course/grades/index'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseIndexRoute = CourseIndexRouteImport.update({
  id: '/course/',
  path: '/course/',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarIndexRoute = CalendarIndexRouteImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseGradesIndexRoute = CourseGradesIndexRouteImport.update({
  id: '/course/grades/',
  path: '/course/grades/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/calendar': typeof CalendarIndexRoute
  '/course': typeof CourseIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/home': typeof HomeIndexRoute
  '/course/grades': typeof CourseGradesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/calendar': typeof CalendarIndexRoute
  '/course': typeof CourseIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/home': typeof HomeIndexRoute
  '/course/grades': typeof CourseGradesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/calendar/': typeof CalendarIndexRoute
  '/course/': typeof CourseIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/home/': typeof HomeIndexRoute
  '/course/grades/': typeof CourseGradesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/calendar'
    | '/course'
    | '/dashboard'
    | '/course/grades'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/calendar' | '/course' | '/dashboard' | '/course/grades'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/calendar/'
    | '/course/'
    | '/dashboard/'
    | '/home/'
    | '/course/grades/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  CalendarIndexRoute: typeof CalendarIndexRoute
  CourseIndexRoute: typeof CourseIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  CourseGradesIndexRoute: typeof CourseGradesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/': {
      id: '/course/'
      path: '/course'
      fullPath: '/course'
      preLoaderRoute: typeof CourseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar/': {
      id: '/calendar/'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/grades/': {
      id: '/course/grades/'
      path: '/course/grades'
      fullPath: '/course/grades'
      preLoaderRoute: typeof CourseGradesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  CalendarIndexRoute: CalendarIndexRoute,
  CourseIndexRoute: CourseIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  CourseGradesIndexRoute: CourseGradesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
